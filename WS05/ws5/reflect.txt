In this workshop I learned how to code a function object by coding the SpellChecker class and also I learned how to code a lambda expression by coding the changePrice function in the main. A lambda is a function defined inside another function and has access to the variables inside the parent function and can only be used inside the parent function but it can be used multiple times inside the parent function. So we use a lambda expression when we want to use a function only inside of another function and need access to parent function variables. The functor on the other hand is a class and we overload the () operator so we can use it as a function. Difference between a functor and a regular function is that a functor has state and does its operations based on the state it has for example in our code the state of the Spellchecker is the array of good words and bad words. So we use a function object or a functor when we want to have a state for our function and use that state in our function. The code inside the constructor of SpellChecker generates an exception and if we want to have the same result without throwing an exception we can use cout inside the constructor to output the message “Bad file name!” instead of throw and remove the try catch block from our client side code in the main. In addition the default constructor for Book and Movie class is used to set the object to a safe empty state and should not be removed even if we do not use it in our main. Moreover, because the Movie and Book class have almost identical logics and attributes we can define a parent class for them and then derive Book and Movie from that parent class.